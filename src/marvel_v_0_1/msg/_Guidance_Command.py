"""autogenerated by genpy from marvel_v_0_1/Guidance_Command.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Guidance_Command(genpy.Message):
  _md5sum = "860c99db662785ea7a1f3796451da869"
  _type = "marvel_v_0_1/Guidance_Command"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 throttle
float32 roll
float32 pitch
float32 yaw
bool arm
uint8 mode

"""
  __slots__ = ['throttle','roll','pitch','yaw','arm','mode']
  _slot_types = ['float32','float32','float32','float32','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       throttle,roll,pitch,yaw,arm,mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Guidance_Command, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.throttle is None:
        self.throttle = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.arm is None:
        self.arm = False
      if self.mode is None:
        self.mode = 0
    else:
      self.throttle = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.arm = False
      self.mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4f2B.pack(_x.throttle, _x.roll, _x.pitch, _x.yaw, _x.arm, _x.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.throttle, _x.roll, _x.pitch, _x.yaw, _x.arm, _x.mode,) = _struct_4f2B.unpack(str[start:end])
      self.arm = bool(self.arm)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4f2B.pack(_x.throttle, _x.roll, _x.pitch, _x.yaw, _x.arm, _x.mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.throttle, _x.roll, _x.pitch, _x.yaw, _x.arm, _x.mode,) = _struct_4f2B.unpack(str[start:end])
      self.arm = bool(self.arm)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4f2B = struct.Struct("<4f2B")
