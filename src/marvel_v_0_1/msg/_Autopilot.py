"""autogenerated by genpy from marvel_v_0_1/Autopilot.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Autopilot(genpy.Message):
  _md5sum = "0cf6a9b7f6f09b8f7564ebd8f92d06df"
  _type = "marvel_v_0_1/Autopilot"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 heading
float32 rate
float32 climb
bool armed

"""
  __slots__ = ['heading','rate','climb','armed']
  _slot_types = ['float32','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       heading,rate,climb,armed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Autopilot, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.heading is None:
        self.heading = 0.
      if self.rate is None:
        self.rate = 0.
      if self.climb is None:
        self.climb = 0.
      if self.armed is None:
        self.armed = False
    else:
      self.heading = 0.
      self.rate = 0.
      self.climb = 0.
      self.armed = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3fB.pack(_x.heading, _x.rate, _x.climb, _x.armed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.heading, _x.rate, _x.climb, _x.armed,) = _struct_3fB.unpack(str[start:end])
      self.armed = bool(self.armed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3fB.pack(_x.heading, _x.rate, _x.climb, _x.armed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.heading, _x.rate, _x.climb, _x.armed,) = _struct_3fB.unpack(str[start:end])
      self.armed = bool(self.armed)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3fB = struct.Struct("<3fB")
